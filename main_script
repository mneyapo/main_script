#!/bin/bash
cd ~      # this takes us to /home/pi 
TIME=`date +%Y-%m-%d_%H:%M:%S`
echo -e "\e[32m$TIME\e[0m"
# Declaration global
lockdir="/home/pi/python-mysql"
container_name="python-mysql1"	
CityClubdir="/home/pi/CityClub"
Autostartdir="/home/pi/CityClub/autostart"
FILE="/home/pi/CityClub/autostart"
# Function
Download_Souce_Code(){
	echo "Download Source Code from github..."
	git clone https://github.com/mneyapo/python-mysql.git /home/pi/python-mysql
	}

Download_image(){
	docker login
	echo -e "\e[33mPull Python Base Image \e[0m";
	docker pull arm32v7/python:3.5.7-stretch;
	# Download image
	echo -e "\e[33mDownload  python-mysql Base Image \e[0m"
	docker pull mne124816/python-mysql;
	docker tag mne124816/python-mysql python-mysql;
	}
	
Install_Docker(){
	echo -e "\e[32m***** Install Docker...\e[0m"

	curl -sSL https://get.docker.com | sh
	
	sudo dpkg --configure -a
	
	echo -e "\e[31m***** usermod -aG docker $USER...\e[0m"
	sudo usermod -aG docker $USER
	
	echo -e "\e[32m***** groupadd docker...\e[0m"
	sudo groupadd docker
	
	echo -e "\e[32m***** addgroup pi docker ...\e[0m"
	sudo addgroup pi docker 
	
	echo -e "\e[32m***** gpasswd -a $USER docker ...\e[0m"
	sudo gpasswd -a $USER docker
	
	echo -e "\e[32m*****  systemctl enable docker ...\e[0m"
	sudo systemctl enable docker
	
	echo -e "\e[32m*****  systemctl start docker ...\e[0m"
	sudo systemctl start docker
}

Install_Docker-compose(){
	echo -e "\e[32m***** Install docker-compose...\e[0m"
	#echo -e "\e[31m***** RUN pip install docker-compose...\e[0m"
	#sudo pip install docker-compose
	echo -e "\e[31m***** RUN apt-get install docker-compose...\e[0m"
	sudo apt-get install -y docker-compose
}

Update_system(){
	echo -e "\e[31m***** RUN apt-get Update && Upgrade...\e[0m"
	sudo apt-get update -y && sudo apt-get upgrade -y;
	}
	
docker_run(){
	echo "Stopping MySQL database server"
	sudo /etc/init.d/mysql stop
	echo "docker run python-mysql1"
	docker run --name python-mysql1 --privileged --restart unless-stopped -it  -v /run/systemd/private:/run/systemd/private --network=host python-mysql
	}
#docker_start(){
	#echo "docker ${container_name} is Not running";
	#sudo systemctl restart docker;
	#echo "docker start ${container_name} ";
	#docker start $container_name;
	#echo "docker attach ${container_name} ";
	#docker attach $container_name;
	#}
	
docker_check(){
	if [[ $(which docker) && $(docker --version) ]]; then
		echo "docker is already Installed";
		#Update_system;
	else
		echo "Installing docker";
		Install_Docker;
		Install_Docker-compose;
		Download_Souce_Code;
		Download_image;
		Update_system;
		sudo reboot
	fi
	}
	
### Check if file does not exist ###
file_check_autostart(){
	FILE="$Autostartdir"
	if [ -f "$FILE" ];
	then
	   #echo  >&2 "File $FILE exist.";
	   retval4="true"
	else
	   #echo  >&2 "File $FILE does not exist";
	   retval4="false"
	fi
	echo "$retval4"
	}
### Check if a directory does not exist ###
directory_check(){
	CityClubdir="/home/pi/CityClub"
	echo "Check if a director exist"
	if [ -d "$CityClubdir" ] 
	then
		echo >&2  "Directory $CityClubdir is already exists";
		retval3="true"
	else
		echo >&2  "Error: Directory $CityClubdir does not exists.";
		retval3="false"
		mkdir -p /home/pi/CityClub
	fi
	echo "$retval3"
	}
### Check if a directory does not exist ###
testlock(){
    retval=""
    if mkdir "$lockdir"
    then # Directory did not exist, but it was created successfully
         echo >&2 "successfully acquired lock: $lockdir"
         echo >&2 "Directory $lockdir did not exist"
         # Download Souce Code
         retval="true"
    else
         echo >&2 "cannot acquire lock, giving up on $lockdir"
         echo >&2 "Directory $lockdir is already exists" 
         retval="false"
    fi
    echo "$retval"
}
# Check container if exists
check_container(){
	container_name="python-mysql1"
	if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${container_name}\$"; then
		#echo >&2 "${container_name} exists";
		retval1="true"
	else
		#echo >&2"${container_name} does not exist";
		retval1="false"
	fi
	echo "$retval1"
	}
# create container if not exists
create_container(){
	container_name="python-mysql1"
	echo "create $container_name container if not exists "
	docker create --name python-mysql1 --privileged --restart unless-stopped -it  -v /run/systemd/private:/run/systemd/private --network=host python-mysql
	echo "$retval1"
	}
		
# Check Running State
check_State_Running(){
	container_name="python-mysql1"	
	result1=$( docker inspect -f {{.State.Running}} $container_name)
	#echo >&2 "result is" $result1
	if [ $result1 = "true" ]
	then
		#echo >&2 "docker ${container_name} is already running";
		retval2="true"
	else
		#echo >&2 "docker ${container_name} is not running";
		retval2="false"
	fi
	echo "$retval2"
	}
# Start python-mysql1 Container
docker_start(){
	container_name="python-mysql1"
	sudo systemctl restart docker;
	echo "docker start ${container_name} ";
	docker start $container_name;
	docker attach $container_name;
	$SHELL
	}
	
docker_stop(){
	echo "Stop all containers."
	sudo docker container stop $(docker container ls -aq)
	sudo docker stop $(docker ps -a -q)
	}	
	
docker_remove_all_stopped_containers(){
	echo "Remove all stopped containers."
	docker container ls -a --filter status=exited --filter status=created
	docker container prune -f
	docker container rm $(docker container ls -aq)
	docker rm $(docker ps -a -q);
	docker container ls -a
	}

Config_docker_autostart(){
	echo "Recreate autostart File"
	sudo rm /home/pi/CityClub/autostart
	echo >&2 "Move autostart to $CityClubdir/autostart"
	sudo cp /home/pi/python-mysql/autostart-d /home/pi/CityClub/autostart
	sudo chmod +rwx /home/pi/CityClub/autostart
	}	

check_Config(){
	retval3=$( directory_check )
	if [ "$retval3" == "true" ]
	then
		echo "directory $CityClubdir is already created";
	else
		echo "directory $CityClubdir created";
	fi
	retval4=$( file_check_autostart )
	if [ "$retval4" == "true" ]
	then
		echo  >&2 "File $FILE exist.";
		Config_docker_autostart
	else
		echo >&2 "File $FILE  does not exist.";
		echo >&2 "Move autostart to $CityClubdir/autostart"
		sudo cp /home/pi/python-mysql/autostart-d /home/pi/CityClub/autostart
		sudo chmod 0777 /home/pi/CityClub/autostart
	fi
	}

			
# Main script
docker_check
#docker_stop;
retval=$( testlock )
if [ "$retval" == "true" ]
then
	echo "directory already created";
	Download_Souce_Code;
	cd /home/pi/python-mysql
	echo -e "\e[33mrebuilt python-mysql Image\e[0m";
	docker build -t python-mysql .
	retval1=$( check_container )
	echo "check_container : $retval1";
	if [ "$retval1" == "false" ]
	then
		echo "container ${container_name} does not exist";
		echo "Create ${container_name} Container...";
		check_Config;
		docker_run;
	else
		echo "container ${container_name} exists";
		retval8=$( check_State_Running )
		echo "check_State_Running : $retval2";
		if [ "$retval8" == "true" ]
		then
			echo "docker ${container_name} is already running";
			docker attach $container_name;
		else
			echo "docker ${container_name} is not running";
			docker_start;
		fi
	fi
else
	echo "directory not created";
	echo "check if Docker Image exist..."
	# if a directory exist check if Docker Image exist Check container if exists Check if Running  ###
	result=$( sudo docker images -q python-mysql)
	if [[ -n "$result" ]]; then
		echo "Docker Image exists";
		retval1=$( check_container )
		echo "check_container : $retval1";
		if [ "$retval1" == "false" ]
		then
			echo "container ${container_name} does not exist";
			echo "Create ${container_name} Container...";
			check_Config;
			docker_run;
			$SHELL
		else
			echo "container ${container_name} exists";
			retval2=$( check_State_Running )
			echo "check_State_Running : $retval2";
			if [ "$retval2" == "true" ]
			then
				echo "docker ${container_name} is already running";
				docker attach $container_name;
			else
				echo "docker ${container_name} is not running";
				docker_start;
			fi
		fi
	else
		echo "Docker Image does not exists";
		echo "No such image";
		Download_image;
		retval1=$( check_container )
		echo "check_container : $retval1";
		if [ "$retval1" == "false" ]
		then
			echo "container ${container_name} does not exist";
			check_Config;
			echo "Create ${container_name} Container...";
			docker_run;
		else
			echo "container ${container_name} exists";
			retval2=$( check_State_Running )
			echo "check_State_Running : $retval2";
			if [ "$retval2" == "true" ]
			then
				echo "docker ${container_name} is already running";
				docker attach $container_name;
			else
				echo "docker ${container_name} is not running";
				docker_start;
			fi
		fi
		
	fi
fi
$SHELL
